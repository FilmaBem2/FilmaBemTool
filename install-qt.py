from cgi import test
import tkinter
from tkinter import messagebox
from appJar import gui
import doctest
import os
from os.path import exists as file_exists
import subprocess
import sys
import webbrowser
import time
import ctypes
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1080, 900)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(".\\imgs/icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 30, 991, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label.setScaledContents(False)
        self.label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label.setObjectName("label")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(30, 90, 201, 371))
        self.groupBox.setFlat(False)
        self.groupBox.setCheckable(False)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 20, 171, 351))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Waterfox = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.Waterfox.setObjectName("Waterfox")
        self.Waterfox.setToolTip("Web browser based on firefox that supports firefox and chrome extensions (Uses firefox account to sync)")
        self.verticalLayout.addWidget(self.Waterfox)
        self.checkBox_5 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox_5.setObjectName("checkBox_5")
        self.checkBox_5.setToolTip("Web browser based on chromium (Uses microsoft account to sync)")
        self.verticalLayout.addWidget(self.checkBox_5)
        self.checkBox_4 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_4.setToolTip("Web browser based on chromium (Uses google account to sync)")
        self.verticalLayout.addWidget(self.checkBox_4)
        self.checkBox_6 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox_6.setObjectName("checkBox_6")
        self.checkBox_6.setToolTip("Web browser based on chromium focused on privacy with a lot of security features (Uses secure private key to sync)")
        self.verticalLayout.addWidget(self.checkBox_6)
        self.checkBox_9 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox_9.setObjectName("checkBox_9")
        self.checkBox_9.setToolTip("A free and open-source web browser that uses the Gecko rendering engine to display web pages (Uses firefox account to sync)")
        self.verticalLayout.addWidget(self.checkBox_9)
        self.checkBox_10 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox_10.setObjectName("checkBox_10")
        self.checkBox_10.setToolTip("Web browser based on chromium (Uses Opera account to sync)")
        self.verticalLayout.addWidget(self.checkBox_10)
        self.checkBox_7 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox_7.setObjectName("checkBox_7")
        self.checkBox_7.setToolTip("Enhanced version of Opera")
        self.verticalLayout.addWidget(self.checkBox_7)
        self.checkBox_8 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox_8.setObjectName("checkBox_8")
        self.checkBox_8.setToolTip("Web browser based on chromium made by original creators of opera (Uses Vivaldi account to sync)")
        self.verticalLayout.addWidget(self.checkBox_8)
        self.checkBox_3 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_3.setToolTip("Web browser based on firefox")
        self.verticalLayout.addWidget(self.checkBox_3)
        self.checkBox = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox.setObjectName("checkBox")
        self.checkBox.setToolTip('Pale Moon is an open-source web browser with an emphasis on customization; its motto is "Your browser, Your way"')
        self.verticalLayout.addWidget(self.checkBox)
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(250, 90, 201, 371))
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.groupBox_2)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 20, 181, 351))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.checkBox_13 = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.checkBox_13.setObjectName("checkBox_13")
        self.checkBox_13.setToolTip("Steam is a video game digital distribution service and storefront")
        self.verticalLayout_2.addWidget(self.checkBox_13)
        self.checkBox_12 = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.checkBox_12.setObjectName("checkBox_12")
        self.checkBox_12.setToolTip("Origin is a digital distribution platform for purchasing and playing video games")
        self.verticalLayout_2.addWidget(self.checkBox_12)
        self.checkBox_11 = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.checkBox_11.setObjectName("checkBox_11")
        self.checkBox_11.setToolTip("uPlay is a digital distribution, digital rights management, multiplayer and communications service")
        self.verticalLayout_2.addWidget(self.checkBox_11)
        self.checkBox_2 = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_2.setToolTip("Gog Galaxy client is designed as a storefront, software delivery, and social network client, allowing players to buy and play games from GOG.com and share them with friends")
        self.verticalLayout_2.addWidget(self.checkBox_2)
        self.checkBox_14 = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.checkBox_14.setObjectName("checkBox_14")
        self.checkBox_14.setToolTip("Battle.net is an Internet-based online game, social networking service, digital distribution, and digital rights management platform")
        self.verticalLayout_2.addWidget(self.checkBox_14)
        self.checkBox_15 = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.checkBox_15.setObjectName("checkBox_15")
        self.checkBox_15.setToolTip("Epic Games Store is a digital video game storefront for Microsoft Windows and macOS")
        self.verticalLayout_2.addWidget(self.checkBox_15)
        self.checkBox_16 = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.checkBox_16.setObjectName("checkBox_16")
        self.checkBox_16.setToolTip("Overwolf is a software platform designed to help developers create extensions for video games, which are then offered to users through Overwolf's App Store (Required to run Curseforge)")
        self.verticalLayout_2.addWidget(self.checkBox_16)
        self.checkBox_17 = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.checkBox_17.setObjectName("checkBox_17")
        self.checkBox_17.setToolTip("Itch.io is a website for users to host, sell and download indie games")
        self.verticalLayout_2.addWidget(self.checkBox_17)
        self.checkBox_18 = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.checkBox_18.setObjectName("checkBox_18")
        self.checkBox_18.setToolTip("Official Minecraft Launcher")
        self.verticalLayout_2.addWidget(self.checkBox_18)
        self.checkBox_19 = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.checkBox_19.setObjectName("checkBox_19")
        self.checkBox_19.setToolTip("Custom Minecraft Launcher with support for multiple instances and modpacks (Including from the curseforge website)")
        self.verticalLayout_2.addWidget(self.checkBox_19)
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(470, 90, 191, 131))
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.groupBox_3)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 20, 171, 111))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.checkBox_20 = QtWidgets.QCheckBox(self.verticalLayoutWidget_3)
        self.checkBox_20.setObjectName("checkBox_20")
        self.checkBox_20.setToolTip("WinRAR is a trialware file archiver utility for Windows")
        self.verticalLayout_3.addWidget(self.checkBox_20)
        self.checkBox_21 = QtWidgets.QCheckBox(self.verticalLayoutWidget_3)
        self.checkBox_21.setObjectName("checkBox_21")
        self.checkBox_21.setToolTip('7-Zip is a free and open-source file archiver, a utility used to place groups of files within compressed containers known as "archives"')
        self.verticalLayout_3.addWidget(self.checkBox_21)
        self.checkBox_22 = QtWidgets.QCheckBox(self.verticalLayoutWidget_3)
        self.checkBox_22.setObjectName("checkBox_22")
        self.checkBox_22.setToolTip("PeaZip is a free and open-source file manager and file archiver for Microsoft Windows, ReactOS, Linux, MacOS and BSD")
        self.verticalLayout_3.addWidget(self.checkBox_22)
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(470, 230, 191, 231))
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.groupBox_4)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(10, 20, 171, 211))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.checkBox_23 = QtWidgets.QCheckBox(self.verticalLayoutWidget_4)
        self.checkBox_23.setObjectName("checkBox_23")
        self.checkBox_23.setToolTip("Guilded is a VoIP, instant messaging and digital distribution platform")
        self.verticalLayout_4.addWidget(self.checkBox_23)
        self.checkBox_24 = QtWidgets.QCheckBox(self.verticalLayoutWidget_4)
        self.checkBox_24.setObjectName("checkBox_24")
        self.checkBox_24.setToolTip("Discord is a VoIP, instant messaging and digital distribution platform")
        self.verticalLayout_4.addWidget(self.checkBox_24)
        self.checkBox_25 = QtWidgets.QCheckBox(self.verticalLayoutWidget_4)
        self.checkBox_25.setObjectName("checkBox_25")
        self.checkBox_25.setToolTip("BetterDiscord extends the functionality of DiscordApp by enhancing it with new features (Requires Discord)")
        self.verticalLayout_4.addWidget(self.checkBox_25)
        self.checkBox_26 = QtWidgets.QCheckBox(self.verticalLayoutWidget_4)
        self.checkBox_26.setObjectName("checkBox_26")
        self.checkBox_26.setToolTip("Skype is a proprietary telecommunications application best known for VoIP-based videotelephony, videoconferencing and voice calls")
        self.verticalLayout_4.addWidget(self.checkBox_26)
        self.checkBox_27 = QtWidgets.QCheckBox(self.verticalLayoutWidget_4)
        self.checkBox_27.setObjectName("checkBox_27")
        self.checkBox_27.setToolTip("Teams is a proprietary business communication platform")
        self.verticalLayout_4.addWidget(self.checkBox_27)
        self.checkBox_28 = QtWidgets.QCheckBox(self.verticalLayoutWidget_4)
        self.checkBox_28.setObjectName("checkBox_28")
        self.checkBox_28.setToolTip("Zoom is a proprietary videotelephony software program")
        self.verticalLayout_4.addWidget(self.checkBox_28)
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(680, 90, 181, 371))
        self.groupBox_5.setObjectName("groupBox_5")
        self.verticalLayoutWidget_5 = QtWidgets.QWidget(self.groupBox_5)
        self.verticalLayoutWidget_5.setGeometry(QtCore.QRect(10, 20, 161, 351))
        self.verticalLayoutWidget_5.setObjectName("verticalLayoutWidget_5")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_5)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.checkBox_29 = QtWidgets.QCheckBox(self.verticalLayoutWidget_5)
        self.checkBox_29.setObjectName("checkBox_29")
        self.checkBox_29.setToolTip("Authy is a two-factor authentication service with cloud backup")
        self.verticalLayout_5.addWidget(self.checkBox_29)
        self.checkBox_30 = QtWidgets.QCheckBox(self.verticalLayoutWidget_5)
        self.checkBox_30.setObjectName("checkBox_30")
        self.checkBox_30.setToolTip("Bitwarden is a free and open-source password management service that stores sensitive information such as website credentials in an encrypted vault")
        self.verticalLayout_5.addWidget(self.checkBox_30)
        self.checkBox_31 = QtWidgets.QCheckBox(self.verticalLayoutWidget_5)
        self.checkBox_31.setObjectName("checkBox_31")
        self.checkBox_31.setToolTip("ProtonVPN is a VPN service operated by the Swiss company Proton Technologies AG, the company behind the email service ProtonMail")
        self.verticalLayout_5.addWidget(self.checkBox_31)
        self.checkBox_32 = QtWidgets.QCheckBox(self.verticalLayoutWidget_5)
        self.checkBox_32.setObjectName("checkBox_32")
        self.checkBox_32.setToolTip("NordVPN is a VPN service with applications for Microsoft Windows, macOS, Linux, Android, iOS, and Android TV")
        self.verticalLayout_5.addWidget(self.checkBox_32)
        self.checkBox_33 = QtWidgets.QCheckBox(self.verticalLayoutWidget_5)
        self.checkBox_33.setObjectName("checkBox_33")
        self.checkBox_33.setToolTip("ExpressVPN is a VPN service offered by the British Virgin Islands-registered company Express Technologies Ltd")
        self.verticalLayout_5.addWidget(self.checkBox_33)
        self.checkBox_34 = QtWidgets.QCheckBox(self.verticalLayoutWidget_5)
        self.checkBox_34.setObjectName("checkBox_34")
        self.checkBox_34.setToolTip("FortiClient is a Fabric Agent that delivers protection, compliance, and secure access in a single, modular lightweight client.")
        self.verticalLayout_5.addWidget(self.checkBox_34)
        self.checkBox_35 = QtWidgets.QCheckBox(self.verticalLayoutWidget_5)
        self.checkBox_35.setObjectName("checkBox_35")
        self.checkBox_35.setToolTip("PIA is a personal VPN service that allows users to connect to multiple locations")
        self.verticalLayout_5.addWidget(self.checkBox_35)
        self.checkBox_36 = QtWidgets.QCheckBox(self.verticalLayoutWidget_5)
        self.checkBox_36.setObjectName("checkBox_36")
        self.checkBox_36.setToolTip("VeraCrypt is a free and open-source utility for on-the-fly encryption (OTFE). The software can create a virtual encrypted disk that works just like a regular disk but within a file. It can also encrypt a partition or in Windows the entire storage device with pre-boot authentication")
        self.verticalLayout_5.addWidget(self.checkBox_36)
        self.checkBox_37 = QtWidgets.QCheckBox(self.verticalLayoutWidget_5)
        self.checkBox_37.setObjectName("checkBox_37")
        self.checkBox_37.setToolTip("Radmin VPN is a free and easy-to-use software product to create virtual local networks. The program allows users to securely connect computers, located behind firewalls.")
        self.verticalLayout_5.addWidget(self.checkBox_37)
        self.checkBox_38 = QtWidgets.QCheckBox(self.verticalLayoutWidget_5)
        self.checkBox_38.setObjectName("checkBox_38")
        self.checkBox_38.setToolTip('LogMeIn Hamachi is a VPN application. It is capable of establishing direct links between computers that are behind network address translation ("NAT") firewalls without requiring reconfiguration')
        self.verticalLayout_5.addWidget(self.checkBox_38)
        self.groupBox_6 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_6.setGeometry(QtCore.QRect(880, 90, 181, 61))
        self.groupBox_6.setObjectName("groupBox_6")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.groupBox_6)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 20, 161, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.checkBox_40 = QtWidgets.QCheckBox(self.horizontalLayoutWidget)
        self.checkBox_40.setObjectName("checkBox_40")
        self.checkBox_40.setToolTip("AnyDesk is a closed source remote desktop application. The proprietary software program provides platform independent remote access to personal computers and other devices running the host application")
        self.horizontalLayout.addWidget(self.checkBox_40)
        self.checkBox_39 = QtWidgets.QCheckBox(self.horizontalLayoutWidget)
        self.checkBox_39.setObjectName("checkBox_39")
        self.checkBox_39.setToolTip("TeamViewer is a remote access and remote control computer software, allowing maintenance of computers and other devices. TeamViewer is proprietary software, but does not require registration and is free of charge for non-commercial use")
        self.horizontalLayout.addWidget(self.checkBox_39)
        self.groupBox_7 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_7.setGeometry(QtCore.QRect(30, 490, 201, 361))
        self.groupBox_7.setObjectName("groupBox_7")
        self.verticalLayoutWidget_6 = QtWidgets.QWidget(self.groupBox_7)
        self.verticalLayoutWidget_6.setGeometry(QtCore.QRect(10, 20, 171, 341))
        self.verticalLayoutWidget_6.setObjectName("verticalLayoutWidget_6")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_6)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.checkBox_41 = QtWidgets.QCheckBox(self.verticalLayoutWidget_6)
        self.checkBox_41.setObjectName("checkBox_41")
        self.checkBox_41.setToolTip(" PowerToys is a set of freeware system utilities designed for power users developed by Microsoft for use on the Windows operating system. These programs add or change features to maximize productivity or add more customization. PowerToys are available for Windows 95, Windows XP, Windows 10 and Windows 11. The PowerToys for Windows 10 are free and open-source software licensed under the MIT License and hosted on GitHub")
        self.verticalLayout_6.addWidget(self.checkBox_41)
        self.checkBox_51 = QtWidgets.QCheckBox(self.verticalLayoutWidget_6)
        self.checkBox_51.setObjectName("checkBox_51")
        self.checkBox_51.setToolTip("Sysinternals Suite is a bundle of the Sysinternals utilities including Process Explorer, Process Monitor, Sysmon, Autoruns, ProcDump, all of the PsTools, and many more.")
        self.verticalLayout_6.addWidget(self.checkBox_51)
        self.checkBox_42 = QtWidgets.QCheckBox(self.verticalLayoutWidget_6)
        self.checkBox_42.setObjectName("checkBox_42")
        self.checkBox_42.setToolTip('PuTTY is a free and open-source terminal emulator, serial console and network file transfer application. It supports several network protocols, including SCP, SSH, Telnet, rlogin, and raw socket connection. It can also connect to a serial port. The name "PuTTY" has no official meaning.')
        self.verticalLayout_6.addWidget(self.checkBox_42)
        self.checkBox_43 = QtWidgets.QCheckBox(self.verticalLayoutWidget_6)
        self.checkBox_43.setObjectName("checkBox_43")
        self.checkBox_43.setToolTip("VirtualBox is a type-2 hypervisor for x86 virtualization")
        self.verticalLayout_6.addWidget(self.checkBox_43)
        self.checkBox_44 = QtWidgets.QCheckBox(self.verticalLayoutWidget_6)
        self.checkBox_44.setObjectName("checkBox_44")
        self.checkBox_44.setToolTip("VMware Workstation Pro is a hosted type-2 hypervisor that runs on x64 versions of Windows and Linux operating systems")
        self.verticalLayout_6.addWidget(self.checkBox_44)
        self.checkBox_45 = QtWidgets.QCheckBox(self.verticalLayoutWidget_6)
        self.checkBox_45.setObjectName("checkBox_45")
        self.checkBox_45.setToolTip("VMware Player, formerly VMware Player, is a type-2 hypervisor for x64 computers running Microsoft Windows or Linux, supplied free of charge by VMware, Inc.")
        self.verticalLayout_6.addWidget(self.checkBox_45)
        self.checkBox_46 = QtWidgets.QCheckBox(self.verticalLayoutWidget_6)
        self.checkBox_46.setObjectName("checkBox_46")
        self.checkBox_46.setToolTip("TeraCopy is a freemium file transfer utility designed as an alternative for the built-in Windows Explorer file transfer feature. Its focus is data integrity, file transfer reliability and the ability to pause or resume file transfers.")
        self.verticalLayout_6.addWidget(self.checkBox_46)
        self.checkBox_47 = QtWidgets.QCheckBox(self.verticalLayoutWidget_6)
        self.checkBox_47.setObjectName("checkBox_47")
        self.checkBox_47.setToolTip("Windows Subsystem for Linux  is a compatibility layer for running Linux binary executables natively on Windows 10, Windows 11, and Windows Server 2019 (It will install ubuntu on wsl)")
        self.verticalLayout_6.addWidget(self.checkBox_47)
        self.checkBox_48 = QtWidgets.QCheckBox(self.verticalLayoutWidget_6)
        self.checkBox_48.setObjectName("checkBox_48")
        self.checkBox_48.setToolTip("Safely partition and manage your hard disks without any data loss")
        self.verticalLayout_6.addWidget(self.checkBox_48)
        self.checkBox_49 = QtWidgets.QCheckBox(self.verticalLayoutWidget_6)
        self.checkBox_49.setObjectName("checkBox_49")
        self.checkBox_49.setToolTip("FileZilla is a free and open-source, cross-platform FTP application, consisting of FileZilla Client and FileZilla Server. Clients are available for Windows, Linux, and macOS, servers are available for Windows only. Both server and client support FTP and FTPS (FTP over SSL/TLS), while the client can in addition connect to SFTP servers")
        self.verticalLayout_6.addWidget(self.checkBox_49)
        self.checkBox_50 = QtWidgets.QCheckBox(self.verticalLayoutWidget_6)
        self.checkBox_50.setObjectName("checkBox_50")
        self.checkBox_50.setToolTip("Git is a software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems)")
        self.verticalLayout_6.addWidget(self.checkBox_50)
        self.groupBox_8 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_8.setGeometry(QtCore.QRect(880, 170, 181, 291))
        self.groupBox_8.setObjectName("groupBox_8")
        self.verticalLayoutWidget_7 = QtWidgets.QWidget(self.groupBox_8)
        self.verticalLayoutWidget_7.setGeometry(QtCore.QRect(10, 20, 160, 271))
        self.verticalLayoutWidget_7.setObjectName("verticalLayoutWidget_7")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_7)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.checkBox_52 = QtWidgets.QCheckBox(self.verticalLayoutWidget_7)
        self.checkBox_52.setObjectName("checkBox_52")
        self.checkBox_52.setToolTip("WPS Office is an office suite for Microsoft Windows, macOS, Linux, iOS, Android, and HarmonyOS developed by Zhuhai-based Chinese software developer Kingsoft. It also comes pre-installed on Fire tablets. WPS Office is made up of three primary components: WPS Writer, WPS Presentation, and WPS Spreadsheet")
        self.verticalLayout_7.addWidget(self.checkBox_52)
        self.checkBox_53 = QtWidgets.QCheckBox(self.verticalLayoutWidget_7)
        self.checkBox_53.setObjectName("checkBox_53")
        self.checkBox_53.setToolTip("LibreOffice is a free and open-source office productivity software suite, a project of The Document Foundation (TDF). The LibreOffice suite consists of programs for word processing, creating and editing of spreadsheets, slideshows, diagrams and drawings, working with databases, and composing mathematical formulae. It is available in 115 languages. Along with personal use editions, TDF also offers enterprise-focused editions of LibreOffice")
        self.verticalLayout_7.addWidget(self.checkBox_53)
        self.checkBox_54 = QtWidgets.QCheckBox(self.verticalLayoutWidget_7)
        self.checkBox_54.setObjectName("checkBox_54")
        self.checkBox_54.setToolTip("OnlyOffice, is a free software office suite. It features online document editors, platform for document management, corporate communication, mail and project management tools")
        self.verticalLayout_7.addWidget(self.checkBox_54)
        self.checkBox_55 = QtWidgets.QCheckBox(self.verticalLayoutWidget_7)
        self.checkBox_55.setObjectName("checkBox_55")
        self.checkBox_55.setToolTip("OpenOffice.org is a discontinued open-source office suite. Sun open-sourced the OpenOffice suite in July 2000 as a competitor to Microsoft Office, releasing version 1.0 on 1 May 2002")
        self.verticalLayout_7.addWidget(self.checkBox_55)
        self.checkBox_56 = QtWidgets.QCheckBox(self.verticalLayoutWidget_7)
        self.checkBox_56.setObjectName("checkBox_56")
        self.checkBox_56.setToolTip("Microsoft Office, or simply Office, is a family of client software, server software, and services developed by Microsoft")
        self.verticalLayout_7.addWidget(self.checkBox_56)
        self.groupBox_9 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_9.setGeometry(QtCore.QRect(250, 490, 411, 361))
        self.groupBox_9.setObjectName("groupBox_9")
        self.verticalLayoutWidget_8 = QtWidgets.QWidget(self.groupBox_9)
        self.verticalLayoutWidget_8.setGeometry(QtCore.QRect(10, 20, 181, 341))
        self.verticalLayoutWidget_8.setObjectName("verticalLayoutWidget_8")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_8)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.checkBox_57 = QtWidgets.QCheckBox(self.verticalLayoutWidget_8)
        self.checkBox_57.setObjectName("checkBox_57")
        self.checkBox_57.setToolTip("Advanced volume control for Windows")
        self.verticalLayout_8.addWidget(self.checkBox_57)
        self.checkBox_60 = QtWidgets.QCheckBox(self.verticalLayoutWidget_8)
        self.checkBox_60.setObjectName("checkBox_60")
        self.checkBox_60.setToolTip("OBS Studio is a free, open-source, and cross-platform screencasting and streaming app. It is available for Windows, macOS, Linux distributions,[a] and BSD. OBS Project raises funds on Open Collective and Patreon")
        self.verticalLayout_8.addWidget(self.checkBox_60)
        self.checkBox_59 = QtWidgets.QCheckBox(self.verticalLayoutWidget_8)
        self.checkBox_59.setObjectName("checkBox_59")
        self.checkBox_59.setToolTip("VLC media player is a free and open-source, portable, cross-platform media player software and streaming media server developed by the VideoLAN project. VLC is available for desktop operating systems and mobile platforms, such as Android, iOS and iPadOS. VLC is also available on digital distribution platforms such as Apple's App Store, Google Play, and Microsoft Store")
        self.verticalLayout_8.addWidget(self.checkBox_59)
        self.checkBox_58 = QtWidgets.QCheckBox(self.verticalLayoutWidget_8)
        self.checkBox_58.setObjectName("checkBox_58")
        self.checkBox_58.setToolTip("MPV is a free, open source, and cross-platform media player")
        self.verticalLayout_8.addWidget(self.checkBox_58)
        self.checkBox_61 = QtWidgets.QCheckBox(self.verticalLayoutWidget_8)
        self.checkBox_61.setObjectName("checkBox_61")
        self.checkBox_61.setToolTip("VS Code is a source-code editor made by Microsoft for Windows, Linux and macOS. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git.")
        self.verticalLayout_8.addWidget(self.checkBox_61)
        self.checkBox_62 = QtWidgets.QCheckBox(self.verticalLayoutWidget_8)
        self.checkBox_62.setObjectName("checkBox_62")
        self.checkBox_62.setToolTip("Notion is a project management and note-taking software. Notion is a software designed to help members of a company or organization coordinate deadlines, objectives, and assignments for the sake of efficiency and productivity.")
        self.verticalLayout_8.addWidget(self.checkBox_62)
        self.checkBox_63 = QtWidgets.QCheckBox(self.verticalLayoutWidget_8)
        self.checkBox_63.setObjectName("checkBox_63")
        self.checkBox_63.setToolTip("Windows Terminal is a multi-tabbed terminal emulator that Microsoft has developed for Windows 10 and later as a replacement for Windows Console. It can run any command-line app in a separate tab. It is preconfigured to run Command Prompt, PowerShell, WSL, SSH, and Azure Cloud Shell Connector. Windows Terminal comes with its own rendering back-end; starting with version 1.11 on Windows 11, command-line apps can run using this newer back-end instead of the old Windows Console")
        self.verticalLayout_8.addWidget(self.checkBox_63)
        self.verticalLayoutWidget_9 = QtWidgets.QWidget(self.groupBox_9)
        self.verticalLayoutWidget_9.setGeometry(QtCore.QRect(230, 20, 171, 341))
        self.verticalLayoutWidget_9.setObjectName("verticalLayoutWidget_9")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_9)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.checkBox_64 = QtWidgets.QCheckBox(self.verticalLayoutWidget_9)
        self.checkBox_64.setObjectName("checkBox_64")
        self.checkBox_64.setToolTip("Thunderbird is a free and open-source cross-platform email client, personal information manager, news client, RSS and chat client developed by the Mozilla Foundation and operated by subsidiary MZLA Technologies Corporation. The project strategy was originally modeled after that of Firefox web browser")
        self.verticalLayout_9.addWidget(self.checkBox_64)
        self.checkBox_65 = QtWidgets.QCheckBox(self.verticalLayoutWidget_9)
        self.checkBox_65.setObjectName("checkBox_65")
        self.checkBox_65.setToolTip("Adblock (Systemwide) by Adguard. AdGuard has Windows and Mac versions, as well as native mobile versions for Android and iOS. The application sets up a local VPN, which filters all traffic on the device.")
        self.verticalLayout_9.addWidget(self.checkBox_65)
        self.checkBox_66 = QtWidgets.QCheckBox(self.verticalLayoutWidget_9)
        self.checkBox_66.setObjectName("checkBox_66")
        self.checkBox_66.setToolTip("Etcher is a free and open-source utility used for writing image files such as .iso and .img files, as well as zipped folders onto storage media to create live SD cards and USB flash drives")
        self.verticalLayout_9.addWidget(self.checkBox_66)
        self.checkBox_67 = QtWidgets.QCheckBox(self.verticalLayoutWidget_9)
        self.checkBox_67.setObjectName("checkBox_67")
        self.checkBox_67.setToolTip("Deluge is a free and open-source, cross-platform BitTorrent client written in Python. Deluge uses a front and back end architecture where libtorrent, a software library written in C++ which provides the application's networking logic, is connected to one of various front ends including a text console, the web interface and a graphical desktop interface using GTK through the project's own Python bindings")
        self.verticalLayout_9.addWidget(self.checkBox_67)
        self.checkBox_68 = QtWidgets.QCheckBox(self.verticalLayoutWidget_9)
        self.checkBox_68.setObjectName("checkBox_68")
        self.checkBox_68.setToolTip("ShareX is a free and open-source screenshot and screencast program for Microsoft Windows. It is published under the GNU General Public License")
        self.verticalLayout_9.addWidget(self.checkBox_68)
        self.checkBox_69 = QtWidgets.QCheckBox(self.verticalLayoutWidget_9)
        self.checkBox_69.setObjectName("checkBox_69")
        self.checkBox_69.setToolTip("GIMP (GNU Image Manipulation Program) is a free and open-source raster graphics editor used for image manipulation (retouching) and image editing, free-form drawing, transcoding between different image file formats, and more specialized tasks. It is not designed to be used for drawing, though some artists and creators have used it for such")
        self.verticalLayout_9.addWidget(self.checkBox_69)
        self.checkBox_70 = QtWidgets.QCheckBox(self.verticalLayoutWidget_9)
        self.checkBox_70.setObjectName("checkBox_70")
        self.checkBox_70.setToolTip("PhotoGIMP is a patch for optimizing GIMP 2.10+ for Adobe Photoshop users.")
        self.verticalLayout_9.addWidget(self.checkBox_70)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(670, 500, 381, 41))
        self.pushButton_4.setObjectName("pushButton_4")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setEnabled(False)
        self.progressBar.setGeometry(QtCore.QRect(670, 570, 381, 21))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setEnabled(False)
        self.label_2.setGeometry(QtCore.QRect(670, 550, 61, 16))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1080, 21))
        self.menubar.setObjectName("menubar")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuHelp_2 = QtWidgets.QMenu(self.menubar)
        self.menuHelp_2.setObjectName("menuHelp_2")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionAbout_2 = QtWidgets.QAction(MainWindow)
        self.actionAbout_2.setObjectName("actionAbout_2")
        self.actionFix_Chocolatey = QtWidgets.QAction(MainWindow)
        self.actionFix_Chocolatey.setObjectName("actionFix_Chocolatey")
        self.actionInstall_Sudo = QtWidgets.QAction(MainWindow)
        self.actionInstall_Sudo.setObjectName("actionInstall_Sudo")
        self.actionDonate = QtWidgets.QAction(MainWindow)
        self.actionDonate.setObjectName("actionDonate")
        self.menuHelp.addAction(self.actionAbout)
        self.menuHelp.addAction(self.actionFix_Chocolatey)
        self.menuHelp.addAction(self.actionInstall_Sudo)
        self.menuHelp_2.addAction(self.actionAbout_2)
        self.menuHelp_2.addAction(self.actionDonate)
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menubar.addAction(self.menuHelp_2.menuAction())
        self.menuHelp_2.addAction(self.actionDonate)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.checkBox_23.setEnabled(False)
        
        # Function to check what checkbox are checked and add corresponding package names to packages variable
        def check():
            # Browsers
            if self.Waterfox.isChecked():
                subprocess.call('sudo choco install waterfox --confirm')
            elif self.checkBox_5.isChecked():
                subprocess.call('sudo choco install microsoft-edge --confirm')
            elif self.checkBox_4.isChecked():
                subprocess.call('sudo choco install googlechrome --confirm')
            elif self.checkBox_6.isChecked():
                subprocess.call('sudo choco install brave --confirm')
            elif self.checkBox_9.isChecked():
                subprocess.call('sudo choco install firefox --confirm')
            elif self.checkBox_10.isChecked():
                subprocess.call('sudo choco install opera --confirm')
            elif self.checkBox_7.isChecked():
                subprocess.call('sudo choco install opera-gx --confirm')
            elif self.checkBox_8.isChecked():
                subprocess.call('sudo choco install vivaldi --confirm')
            elif self.checkBox_3.isChecked():
                subprocess.call('sudo choco install librewolf --confirm')
            elif self.checkBox.isChecked():
                subprocess.call('sudo choco install palemoon --confirm')
            # Games
            elif self.checkBox_13.isChecked():
                subprocess.call('sudo choco install steam-client --confirm')
            elif self.checkBox_12.isChecked():
                subprocess.call('sudo choco install origin --confirm')
            elif self.checkBox_11.isChecked():
                subprocess.call('sudo choco install ubisoft-connect --confirm')
            elif self.checkBox_2.isChecked():
                subprocess.call('sudo choco install goggalaxy --confirm')
            elif self.checkBox_14.isChecked():
                subprocess.call('sudo choco install battle.net --confirm')
            elif self.checkBox_15.isChecked():
                subprocess.call('sudo choco install epicgameslauncher --confirm')
            elif self.checkBox_16.isChecked():
                subprocess.call('sudo choco install overwolf --confirm')
            elif self.checkBox_17.isChecked():
                subprocess.call('sudo choco install itch --confirm')
            elif self.checkBox_18.isChecked():
                subprocess.call('sudo choco install minecraft-launcher --confirm')
            elif self.checkBox_19.isChecked():
                subprocess.call('sudo choco install gdlauncher --confirm')
            # Compression
            elif self.checkBox_20.isChecked():
                subprocess.call('sudo choco install winrar --confirm')
            elif self.checkBox_21.isChecked():
                subprocess.call('sudo choco install peazip --confirm')
            elif self.checkBox_22.isChecked():
                subprocess.call('sudo choco install gdlauncher --confirm')
            # Communication
            elif self.checkBox_23.isChecked():
                time.sleep(0)
            elif self.checkBox_24.isChecked():
                subprocess.call('sudo choco install discord.install --confirm')
            elif self.checkBox_25.isChecked():
                subprocess.call('sudo choco install betterdiscord --confirm')
            elif self.checkBox_26.isChecked():
                subprocess.call('sudo choco install skype --confirm')
            elif self.checkBox_27.isChecked():
                subprocess.call('sudo choco install microsoft-teams.install --confirm')
            elif self.checkBox_28.isChecked():
                subprocess.call('sudo choco install zoom --confirm')
           # Security
            elif self.checkBox_29.isChecked():
                subprocess.call('sudo choco install authy-desktop --confirm')
            elif self.checkBox_30.isChecked():
                subprocess.call('sudo choco install bitwarden --confirm')
            elif self.checkBox_31.isChecked():
                subprocess.call('sudo choco install protonvpn --confirm')
            elif self.checkBox_32.isChecked():
                subprocess.call('sudo choco install nordvpn --confirm')
            elif self.checkBox_33.isChecked():
                subprocess.call('sudo choco install expressvpn --confirm')
            elif self.checkBox_34.isChecked():
                subprocess.call('sudo choco install forticlientvpn --confirm')
            elif self.checkBox_35.isChecked():
                subprocess.call('sudo choco install pia --confirm')
            elif self.checkBox_36.isChecked():
                subprocess.call('sudo choco install veracrypt --confirm')
            elif self.checkBox_37.isChecked():
                subprocess.call('sudo choco install radmin-vpn --confirm')
            elif self.checkBox_38.isChecked():
                subprocess.call('sudo choco install hamachi --confirm')
            # Remote Control
            elif self.checkBox_40.isChecked():
                subprocess.call('sudo choco install anydesk.install --confirm')
            elif self.checkBox_39.isChecked():
                subprocess.call('sudo choco install teamviewer --confirm')
            # PowerUserTools
            elif self.checkBox_41.isChecked():
                subprocess.call('sudo choco install powertoys --confirm')
            elif self.checkBox_51.isChecked():
                subprocess.call('sudo choco install sysinternals --confirm')
            elif self.checkBox_42.isChecked():
                subprocess.call('sudo choco install putty --confirm')
            elif self.checkBox_43.isChecked():
                subprocess.call('sudo choco install virtualbox --confirm')
            elif self.checkBox_44.isChecked():
                subprocess.call('sudo choco install vmwareworkstation --confirm')
            elif self.checkBox_45.isChecked():
                subprocess.call('sudo choco install vmware-workstation-player --confirm')
            elif self.checkBox_46.isChecked():
                subprocess.call('sudo choco install teracopy --confirm')
            elif self.checkBox_47.isChecked():
                subprocess.call('sudo wsl --install')
            elif self.checkBox_48.isChecked():
                subprocess.call('sudo choco install partition-assistant-standard --confirm')
            elif self.checkBox_49.isChecked():
                subprocess.call('sudo choco install filezilla --confirm')
            elif self.checkBox_50.isChecked():
                subprocess.call('sudo choco install git --confirm')
            # Office
            elif self.checkBox_52.isChecked():
                subprocess.call('sudo choco install wps-office-free --confirm')
            elif self.checkBox_53.isChecked():
                subprocess.call('sudo choco install libreoffice-fresh --confirm')
            elif self.checkBox_54.isChecked():
                subprocess.call('sudo choco install onlyoffice --confirm')
            elif self.checkBox_55.isChecked():
                subprocess.call('sudo choco install openoffice --confirm')
            elif self.checkBox_56.isChecked():
                subprocess.call('sudo choco install office365homepremium --confirm')
            # Others
            elif self.checkBox_57.isChecked():
                subprocess.call('sudo choco install eartrumpet --confirm')
            elif self.checkBox_60.isChecked():
                subprocess.call('sudo choco install obs-studio --confirm')
            elif self.checkBox_59.isChecked():
                subprocess.call('sudo choco install vlc --confirm')
            elif self.checkBox_58.isChecked():
                subprocess.call('sudo choco install mpv --confirm')
            elif self.checkBox_61.isChecked():
                subprocess.call('sudo choco install vscode --confirm')
            elif self.checkBox_62.isChecked():
                subprocess.call('sudo choco install notion --confirm')
            elif self.checkBox_63.isChecked():
                subprocess.call('sudo choco install microsoft-windows-terminal --confirm')
            elif self.checkBox_64.isChecked():
                subprocess.call('sudo choco install thunderbird --confirm')
            elif self.checkBox_65.isChecked():
                subprocess.call('sudo choco install adguardhome --confirm')
            elif self.checkBox_66.isChecked():
                subprocess.call('sudo choco install etcher --confirm')
            elif self.checkBox_67.isChecked():
                subprocess.call('sudo choco install deluge --confirm')
            elif self.checkBox_68.isChecked():
                subprocess.call('sudo choco install sharex --confirm')
            elif self.checkBox_69.isChecked():
                subprocess.call('sudo choco install gimp --confirm')
                subprocess.call('sudo choco install gimp-data-extras --confirm')
            elif self.checkBox_70.isChecked():
                subprocess.call('sudo choco install photogimp --confirm')
            else:
                time.sleep(0)

        # Function to install packages
        def packageinstall():
            workingfeature()
            check()
            workdone()

        # This Function will disable all checkbox and install button to prevent user from change selections during the process
        def workingfeature():
            self.pushButton_4.setEnabled(False)
            self.Waterfox.setEnabled(False)
            self.checkBox_5.setEnabled(False)
            self.checkBox_4.setEnabled(False)
            self.checkBox_6.setEnabled(False)
            self.checkBox_9.setEnabled(False)
            self.checkBox_10.setEnabled(False)
            self.checkBox_7.setEnabled(False)
            self.checkBox_8.setEnabled(False)
            self.checkBox_3.setEnabled(False)
            self.checkBox.setEnabled(False)
            self.checkBox_13.setEnabled(False)
            self.checkBox_12.setEnabled(False)
            self.checkBox_11.setEnabled(False)
            self.checkBox_2.setEnabled(False)
            self.checkBox_14.setEnabled(False)
            self.checkBox_15.setEnabled(False)
            self.checkBox_16.setEnabled(False)
            self.checkBox_17.setEnabled(False)
            self.checkBox_18.setEnabled(False)
            self.checkBox_19.setEnabled(False)
            self.checkBox_20.setEnabled(False)
            self.checkBox_21.setEnabled(False)
            self.checkBox_22.setEnabled(False)
            # self.checkBox_23.setEnabled(False)
            self.checkBox_24.setEnabled(False)
            self.checkBox_25.setEnabled(False)
            self.checkBox_26.setEnabled(False)
            self.checkBox_27.setEnabled(False)
            self.checkBox_28.setEnabled(False)
            self.checkBox_29.setEnabled(False)
            self.checkBox_30.setEnabled(False)
            self.checkBox_31.setEnabled(False)
            self.checkBox_32.setEnabled(False)
            self.checkBox_33.setEnabled(False)
            self.checkBox_34.setEnabled(False)
            self.checkBox_35.setEnabled(False)
            self.checkBox_36.setEnabled(False)
            self.checkBox_37.setEnabled(False)
            self.checkBox_38.setEnabled(False)
            self.checkBox_40.setEnabled(False)
            self.checkBox_39.setEnabled(False)
            self.checkBox_41.setEnabled(False)
            self.checkBox_51.setEnabled(False)
            self.checkBox_42.setEnabled(False)
            self.checkBox_43.setEnabled(False)
            self.checkBox_44.setEnabled(False)
            self.checkBox_45.setEnabled(False)
            self.checkBox_46.setEnabled(False)
            self.checkBox_47.setEnabled(False)
            self.checkBox_48.setEnabled(False)
            self.checkBox_49.setEnabled(False)
            self.checkBox_50.setEnabled(False)
            self.checkBox_52.setEnabled(False)
            self.checkBox_53.setEnabled(False)
            self.checkBox_54.setEnabled(False)
            self.checkBox_55.setEnabled(False)
            self.checkBox_56.setEnabled(False)
            self.checkBox_57.setEnabled(False)
            self.checkBox_60.setEnabled(False)
            self.checkBox_59.setEnabled(False)
            self.checkBox_58.setEnabled(False)
            self.checkBox_61.setEnabled(False)
            self.checkBox_62.setEnabled(False)
            self.checkBox_63.setEnabled(False)
            self.checkBox_64.setEnabled(False)
            self.checkBox_65.setEnabled(False)
            self.checkBox_66.setEnabled(False)
            self.checkBox_67.setEnabled(False)
            self.checkBox_68.setEnabled(False)
            self.checkBox_69.setEnabled(False)
            self.checkBox_70.setEnabled(False)
        
        # This functions re-enables the previous disabled things
        def workdone():
            self.pushButton_4.setEnabled(True)
            self.Waterfox.setEnabled(True)
            self.checkBox_5.setEnabled(True)
            self.checkBox_4.setEnabled(True)
            self.checkBox_6.setEnabled(True)
            self.checkBox_9.setEnabled(True)
            self.checkBox_10.setEnabled(True)
            self.checkBox_7.setEnabled(True)
            self.checkBox_8.setEnabled(True)
            self.checkBox_3.setEnabled(True)
            self.checkBox.setEnabled(True)
            self.checkBox_13.setEnabled(True)
            self.checkBox_12.setEnabled(True)
            self.checkBox_11.setEnabled(True)
            self.checkBox_2.setEnabled(True)
            self.checkBox_14.setEnabled(True)
            self.checkBox_15.setEnabled(True)
            self.checkBox_16.setEnabled(True)
            self.checkBox_17.setEnabled(True)
            self.checkBox_18.setEnabled(True)
            self.checkBox_19.setEnabled(True)
            self.checkBox_20.setEnabled(True)
            self.checkBox_21.setEnabled(True)
            self.checkBox_22.setEnabled(True)
            # self.checkBox_23.setEnabled(True)
            self.checkBox_24.setEnabled(True)
            self.checkBox_25.setEnabled(True)
            self.checkBox_26.setEnabled(True)
            self.checkBox_27.setEnabled(True)
            self.checkBox_28.setEnabled(True)
            self.checkBox_29.setEnabled(True)
            self.checkBox_30.setEnabled(True)
            self.checkBox_31.setEnabled(True)
            self.checkBox_32.setEnabled(True)
            self.checkBox_33.setEnabled(True)
            self.checkBox_34.setEnabled(True)
            self.checkBox_35.setEnabled(True)
            self.checkBox_36.setEnabled(True)
            self.checkBox_37.setEnabled(True)
            self.checkBox_38.setEnabled(True)
            self.checkBox_40.setEnabled(True)
            self.checkBox_39.setEnabled(True)
            self.checkBox_41.setEnabled(True)
            self.checkBox_51.setEnabled(True)
            self.checkBox_42.setEnabled(True)
            self.checkBox_43.setEnabled(True)
            self.checkBox_44.setEnabled(True)
            self.checkBox_45.setEnabled(True)
            self.checkBox_46.setEnabled(True)
            self.checkBox_47.setEnabled(True)
            self.checkBox_48.setEnabled(True)
            self.checkBox_49.setEnabled(True)
            self.checkBox_50.setEnabled(True)
            self.checkBox_52.setEnabled(True)
            self.checkBox_53.setEnabled(True)
            self.checkBox_54.setEnabled(True)
            self.checkBox_55.setEnabled(True)
            self.checkBox_56.setEnabled(True)
            self.checkBox_57.setEnabled(True)
            self.checkBox_60.setEnabled(True)
            self.checkBox_59.setEnabled(True)
            self.checkBox_58.setEnabled(True)
            self.checkBox_61.setEnabled(True)
            self.checkBox_62.setEnabled(True)
            self.checkBox_63.setEnabled(True)
            self.checkBox_64.setEnabled(True)
            self.checkBox_65.setEnabled(True)
            self.checkBox_66.setEnabled(True)
            self.checkBox_67.setEnabled(True)
            self.checkBox_68.setEnabled(True)
            self.checkBox_69.setEnabled(True)
            self.checkBox_70.setEnabled(True)
        
        def installButton():
            packageinstall()

        # Elevate privileges to install chocolatey and sudo
        def chocofix():
            def is_admin():
                try:
                    return ctypes.windll.shell32.IsUserAnAdmin()
                except:
                    return False
            if is_admin():
                subprocess.call("powershell.exe Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))")
            else:
                ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)

        def installsudo():
            def is_admin():
                try:
                    return ctypes.windll.shell32.IsUserAnAdmin()
                except:
                    return False
            if is_admin():
                subprocess.call('choco install sudo --confirm')
            else:
                ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)
        
        # Check if chocolatey is installed and call the install funcition
        def firstSetup():
            if file_exists('C:\ProgramData\Chocolatey\choco.exe'):
                time.sleep(0)
            else:
                chocofix()
                installsudo()
        
        def upgradeall():
            subprocess.call('sudo choco upgrade all --confirm')

        def donation():
            webbrowser.open_new_tab('https://paypal.me/filmabemp')

        def help():
            msg = QMessageBox()
            msg.setWindowTitle('About Filma Bem Tool')
            msg.setText("""This is a tool to help people to install software.
Created in Python with a QT GUI with the help of PyQt5 module.

This only works with Chocolatey and sudo installed.
By default it will install Chocolatey and sudo for you when you launch it for the first time.
if anyone of this fails you can do it manually via the top menu.

I may translate this tool to more languages but it's not my priority right now.
If you like this tool you can donateto my paypal: 'https://paypal.me/filmabemp'.

I Know the progressbar is not working... it's just there for a future code.
            """)
            msgboxvar = msg.exec_()
        
        firstSetup()
        
        # Triggers for funcions

        self.pushButton_4.clicked.connect(installButton)
        self.actionAbout.triggered.connect(upgradeall)
        self.actionAbout_2.triggered.connect(help)
        self.actionFix_Chocolatey.triggered.connect(chocofix)
        self.actionInstall_Sudo.triggered.connect(installsudo)
        self.actionDonate.triggered.connect(donation)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Filma Bem Tool"))
        self.label.setText(_translate("MainWindow", "Welcome to Filma Bem Tool. Select the programs you want to install and then click on the Install button"))
        self.groupBox.setTitle(_translate("MainWindow", "Browsers"))
        self.Waterfox.setText(_translate("MainWindow", "Waterfox"))
        self.checkBox_5.setText(_translate("MainWindow", "Microsoft Edge"))
        self.checkBox_4.setText(_translate("MainWindow", "Google Chrome"))
        self.checkBox_6.setText(_translate("MainWindow", "Brave Browser"))
        self.checkBox_9.setText(_translate("MainWindow", "Mozilla Firefox"))
        self.checkBox_10.setText(_translate("MainWindow", "Opera"))
        self.checkBox_7.setText(_translate("MainWindow", "Opera GX"))
        self.checkBox_8.setText(_translate("MainWindow", "Vivaldi"))
        self.checkBox_3.setText(_translate("MainWindow", "Librewolf"))
        self.checkBox.setText(_translate("MainWindow", "Pale Moon"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Games"))
        self.checkBox_13.setText(_translate("MainWindow", "Steam"))
        self.checkBox_12.setText(_translate("MainWindow", "Origin"))
        self.checkBox_11.setText(_translate("MainWindow", "UPlay"))
        self.checkBox_2.setText(_translate("MainWindow", "GoG Galaxy"))
        self.checkBox_14.setText(_translate("MainWindow", "Battle.Net"))
        self.checkBox_15.setText(_translate("MainWindow", "Épic Games Store"))
        self.checkBox_16.setText(_translate("MainWindow", "Overwolf"))
        self.checkBox_17.setText(_translate("MainWindow", "Itch.io"))
        self.checkBox_18.setText(_translate("MainWindow", "Minecraft Launcher"))
        self.checkBox_19.setText(_translate("MainWindow", "GDLauncher"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Compression"))
        self.checkBox_20.setText(_translate("MainWindow", "Winrar"))
        self.checkBox_21.setText(_translate("MainWindow", "7-Zip"))
        self.checkBox_22.setText(_translate("MainWindow", "PeaZip"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Communications"))
        self.checkBox_23.setText(_translate("MainWindow", "Guilded"))
        self.checkBox_24.setText(_translate("MainWindow", "Discord"))
        self.checkBox_25.setText(_translate("MainWindow", "Better Discord"))
        self.checkBox_26.setText(_translate("MainWindow", "Skype"))
        self.checkBox_27.setText(_translate("MainWindow", "Teams"))
        self.checkBox_28.setText(_translate("MainWindow", "Zoom"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Security"))
        self.checkBox_29.setText(_translate("MainWindow", "Authy"))
        self.checkBox_30.setText(_translate("MainWindow", "BitWarden"))
        self.checkBox_31.setText(_translate("MainWindow", "ProtonVPN"))
        self.checkBox_32.setText(_translate("MainWindow", "NordVPN"))
        self.checkBox_33.setText(_translate("MainWindow", "ExpressVPN"))
        self.checkBox_34.setText(_translate("MainWindow", "FortiClient"))
        self.checkBox_35.setText(_translate("MainWindow", "Private Internet Access"))
        self.checkBox_36.setText(_translate("MainWindow", "VeraCrypt"))
        self.checkBox_37.setText(_translate("MainWindow", "RadminVPN"))
        self.checkBox_38.setText(_translate("MainWindow", "Hamachi"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Remote Control"))
        self.checkBox_40.setText(_translate("MainWindow", "Anydesk"))
        self.checkBox_39.setText(_translate("MainWindow", "Teamviewer"))
        self.groupBox_7.setTitle(_translate("MainWindow", "Power User Tools"))
        self.checkBox_41.setText(_translate("MainWindow", "Powertoys"))
        self.checkBox_51.setText(_translate("MainWindow", "Sysinternals Suite"))
        self.checkBox_42.setText(_translate("MainWindow", "Putty"))
        self.checkBox_43.setText(_translate("MainWindow", "Virtualbox"))
        self.checkBox_44.setText(_translate("MainWindow", "Vmware Workstation"))
        self.checkBox_45.setText(_translate("MainWindow", "Vmware Player"))
        self.checkBox_46.setText(_translate("MainWindow", "TeraCopy"))
        self.checkBox_47.setText(_translate("MainWindow", "WSL"))
        self.checkBox_48.setText(_translate("MainWindow", "Aomei Partition Assistant"))
        self.checkBox_49.setText(_translate("MainWindow", "FileZilla"))
        self.checkBox_50.setText(_translate("MainWindow", "Git"))
        self.groupBox_8.setTitle(_translate("MainWindow", "Office"))
        self.checkBox_52.setText(_translate("MainWindow", "WPS Office"))
        self.checkBox_53.setText(_translate("MainWindow", "LibreOffice"))
        self.checkBox_54.setText(_translate("MainWindow", "OnlyOffice"))
        self.checkBox_55.setText(_translate("MainWindow", "OpenOffice"))
        self.checkBox_56.setText(_translate("MainWindow", "Microsoft Office"))
        self.groupBox_9.setTitle(_translate("MainWindow", "Other Tools"))
        self.checkBox_57.setText(_translate("MainWindow", "EarTrumpet"))
        self.checkBox_60.setText(_translate("MainWindow", "OBS Studio"))
        self.checkBox_59.setText(_translate("MainWindow", "VLC Media Player"))
        self.checkBox_58.setText(_translate("MainWindow", "MPV"))
        self.checkBox_61.setText(_translate("MainWindow", "Visual Studio Code"))
        self.checkBox_62.setText(_translate("MainWindow", "Notion"))
        self.checkBox_63.setText(_translate("MainWindow", "Windows Terminal"))
        self.checkBox_64.setText(_translate("MainWindow", "Mozilla Thunderbird"))
        self.checkBox_65.setText(_translate("MainWindow", "Adblock (Systemwide)"))
        self.checkBox_66.setText(_translate("MainWindow", "Etcher"))
        self.checkBox_67.setText(_translate("MainWindow", "Deluge"))
        self.checkBox_68.setText(_translate("MainWindow", "ShareX"))
        self.checkBox_69.setText(_translate("MainWindow", "GIMP"))
        self.checkBox_70.setText(_translate("MainWindow", "PhotoGIMP"))
        self.pushButton_4.setText(_translate("MainWindow", "Install"))
        self.label_2.setText(_translate("MainWindow", "Progress:"))
        self.menuHelp.setTitle(_translate("MainWindow", "Software"))
        self.menuHelp_2.setTitle(_translate("MainWindow", "Help"))
        self.actionAbout.setText(_translate("MainWindow", "Update"))
        self.actionAbout.setShortcut(_translate("MainWindow", "Ctrl+U"))
        self.actionAbout_2.setText(_translate("MainWindow", "About"))
        self.actionAbout_2.setShortcut(_translate("MainWindow", "F1"))
        self.actionFix_Chocolatey.setText(_translate("MainWindow", "Fix Chocolatey"))
        self.actionFix_Chocolatey.setShortcut(_translate("MainWindow", "Ctrl+Alt+C"))
        self.actionInstall_Sudo.setText(_translate("MainWindow", "Install Sudo"))
        self.actionInstall_Sudo.setShortcut(_translate("MainWindow", "Ctrl+Alt+S"))
        self.actionDonate.setText(_translate("MainWindow", "Donate"))
        self.actionDonate.setShortcut(_translate("MainWindow", "Ctrl+D"))

# Launch UI

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
